/**
 * 제너릭 타입 VS. 유니언 타입
 * 
 * 보통 제너릭 타입과 유니언 타입을 많이 헷갈리는데
 * 둘의 결과로 얻을 수 있는 것은 완전히 다르다
 * 
 * 
 * // 유니언 타입
 * data:(string, number, boolean)[]
 * 유니언 타입으로 할 경우 코드의 데이터가 문자열의 배열이나 숫자의 배열이나
 * 혼합된 배열이라고 입력되어 있다는 것
 * 
 * 이렇게 될 경우, 데이터를 추가할 때 add 함수에서 string, number, boolean을 추가할 수 없게 된다
 * 
 * => 이 메소드를 호출할 때마다 이 타입들 중 하나를 자유롭게 사용할 수 있다고
 * 입력한 것..
 * string만 입력되길 원해도 아래의 매개변수는 string, number, boolean이 전부 들어갈 수 있다는 것이다 
 * 
 * 
 * // 제네릭 타입
 * DataStorage<T: extends string | number | boolean> {}
 * 설정한 타입과 다른 경우 오류가 난다
 * 
 * 
 * 
 * 
 * 
 * =>
 * 제네릭 타입: 
 * 특정 타입을 고정하거나 생성하 전체 클래스 인스턴스에 걸쳐 같은 함수를 사용하거나, 
 * 전체 함수에 걸쳐 같은 타입을 사용하고자 할 때 유용하다
 * : 제너릭 타입은 여러 타입에 대해 동작하는 요소를 정의
 * : 다른 타입의 데이터를 내보낼 때?
 * 
 * 
 * 유니언 타입: 모든 메소드 호출이나 모든 함수 호출마다 다른 타입을 지정하고자 하는 경우에 유용하다
 * : 유니언 타입은 여러 타입 중 하나가 될 수 있는 값을 의미
 * : 특정 위치에서 고정된 타입 집합을 허용하는 경우(문자열 또는 숫자 함수 매개변수)
 * 
 * (예시가 필요해..)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */